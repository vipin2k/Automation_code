{"name": "test_sample_test_case[Requests/Payload/Json/Sample_Payload.json]", "status": "broken", "statusDetails": {"message": "TypeError: str expected, not UUID", "trace": "request = <SubRequest 'readPayLoadJsonWithUUID' for <Function test_sample_test_case[Requests/Payload/Json/Sample_Payload.json]>>\n\n    @pytest.fixture(scope=\"class\")\n    def readPayLoadJsonWithUUID(request):\n        active_uuid = uuid.uuid4()\n        filepath = f\"{os.getcwd()}/{str(request.param)}\"\n        with open(filepath, 'r') as js:\n            base_jsondata = json.load(js)\n        js.close()\n        base_jsonStr = json.dumps(base_jsondata)\n        # logging.info('base_jsonStr :'+base_jsonStr)\n>       jsonDataModify = Constants().patientParameters(str(active_uuid))\n\nTestCases\\conftest.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommonClass\\api_utils\\FrameworkConstants.py:10: in __init__\n    os.environ['EnvironmentName'] = uuid.uuid4()\nC:\\Users\\Darvin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\os.py:684: in __setitem__\n    value = self.encodevalue(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = UUID('fcc10f70-7932-4ae0-b944-89c52fe04356')\n\n    def check_str(value):\n        if not isinstance(value, str):\n>           raise TypeError(\"str expected, not %s\" % type(value).__name__)\nE           TypeError: str expected, not UUID\n\nC:\\Users\\Darvin\\AppData\\Local\\Programs\\Python\\Python39\\lib\\os.py:742: TypeError"}, "parameters": [{"name": "readPayLoadJsonWithUUID", "value": "'Requests/Payload/Json/Sample_Payload.json'"}], "start": 1673161934138, "stop": 1673161934138, "uuid": "c8388d17-4a57-486d-900a-a1eadf9b4fe3", "historyId": "15f3caf09d308017c239bcc062c0d633", "testCaseId": "606f971d2b9dc0d3c9639071702cc2c9", "fullName": "TestCases.testsuites.test_sample.TestSample#test_sample_test_case", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('env_setup')"}, {"name": "parentSuite", "value": "TestCases.testsuites"}, {"name": "suite", "value": "test_sample"}, {"name": "subSuite", "value": "TestSample"}, {"name": "host", "value": "DESKTOP-A8SJNO5"}, {"name": "thread", "value": "72552-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.testsuites.test_sample"}]}