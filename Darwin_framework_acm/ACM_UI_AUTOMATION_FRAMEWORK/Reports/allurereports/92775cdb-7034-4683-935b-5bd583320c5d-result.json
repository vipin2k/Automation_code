{"name": "test_member", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: unable to connect to renderer\n  (failed to check if window was closed: disconnected: unable to connect to renderer)\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00F2F243]\n\t(No symbol) [0x00EB7FD1]\n\t(No symbol) [0x00DAD04D]\n\t(No symbol) [0x00D9D3F8]\n\t(No symbol) [0x00D914E4]\n\t(No symbol) [0x00D92344]\n\t(No symbol) [0x00E017A5]\n\t(No symbol) [0x00DF8553]\n\t(No symbol) [0x00DD163C]\n\t(No symbol) [0x00DD269D]\n\tGetHandleVerifier [0x011C9A22+2655074]\n\tGetHandleVerifier [0x011BCA24+2601828]\n\tGetHandleVerifier [0x00FD8C0A+619850]\n\tGetHandleVerifier [0x00FD7830+614768]\n\t(No symbol) [0x00EC05FC]\n\t(No symbol) [0x00EC5968]\n\t(No symbol) [0x00EC5A55]\n\t(No symbol) [0x00ED051B]\n\tBaseThreadInitThunk [0x75530619+25]\n\tRtlGetAppContainerNamedObjectPath [0x7758784D+237]\n\tRtlGetAppContainerNamedObjectPath [0x7758781D+189]", "trace": "self = <allure_commons._allure.fixture object at 0x0000018006AEF510>, args = (), kwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\n..\\ACM\\venv\\Lib\\site-packages\\allure_commons\\_allure.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\UI_Automation\\TestCases\\conftest.py:79: in test_setup\n    driver.close()\n..\\ACM\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:552: in close\n    self.execute(Command.CLOSE)\n..\\ACM\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018006ADD290>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: unable to connect to renderer\\\\n  ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7758784D+237]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7758781D+189]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: unable to connect to renderer\nE         (failed to check if window was closed: disconnected: unable to connect to renderer)\nE         (Session info: chrome=108.0.5359.125)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00F2F243]\nE       \t(No symbol) [0x00EB7FD1]\nE       \t(No symbol) [0x00DAD04D]\nE       \t(No symbol) [0x00D9D3F8]\nE       \t(No symbol) [0x00D914E4]\nE       \t(No symbol) [0x00D92344]\nE       \t(No symbol) [0x00E017A5]\nE       \t(No symbol) [0x00DF8553]\nE       \t(No symbol) [0x00DD163C]\nE       \t(No symbol) [0x00DD269D]\nE       \tGetHandleVerifier [0x011C9A22+2655074]\nE       \tGetHandleVerifier [0x011BCA24+2601828]\nE       \tGetHandleVerifier [0x00FD8C0A+619850]\nE       \tGetHandleVerifier [0x00FD7830+614768]\nE       \t(No symbol) [0x00EC05FC]\nE       \t(No symbol) [0x00EC5968]\nE       \t(No symbol) [0x00EC5A55]\nE       \t(No symbol) [0x00ED051B]\nE       \tBaseThreadInitThunk [0x75530619+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x7758784D+237]\nE       \tRtlGetAppContainerNamedObjectPath [0x7758781D+189]\n\n..\\ACM\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: WebDriverException"}, "attachments": [{"name": "stdout", "source": "e278f53d-1cd1-4afc-8d0a-d4c398d15a21-attachment.txt", "type": "text/plain"}], "start": 1674639585758, "stop": 1674639605666, "uuid": "dcab8594-47cf-4e85-9807-f1151a2acb9a", "historyId": "fcbd87c39b5178d291b12e7bf1e410ab", "testCaseId": "9cdac9e9efb952e294eadcfe8cce2eec", "fullName": "TestCases.testsuites.test_sample.TestSample1#test_member", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('test_setup')"}, {"name": "parentSuite", "value": "TestCases.testsuites"}, {"name": "suite", "value": "test_sample"}, {"name": "subSuite", "value": "TestSample1"}, {"name": "host", "value": "WSAMZN-7K50OVEF"}, {"name": "thread", "value": "8516-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.testsuites.test_sample"}]}