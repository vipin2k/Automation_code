{"name": "test_sample_test_case[Requests/Payload/Json/Sample_Payload.json]", "status": "broken", "statusDetails": {"message": "NameError: name 'jsonValidation' is not defined", "trace": "self = <TestCases.testsuites.test_sample.TestSample object at 0x00000272388BE250>\napiTestData = {'BaseUrl': {'DeleteBaseUrl': '', 'GetBaseUrl': 'https://reqres.in', 'PostBaseUrl': '', 'PutBaseUrl': ''}, 'Credential...oint': '/api/users/{user}', 'EndPointName': 'testget', 'EnvironmentName': 'Dev', 'ResponseCode': '[200]', ...}}}], ...}\nreadPayLoadJsonWithUUID = {}, configLogger = <RootLogger root (INFO)>\n\n    @pytest.mark.parametrize('readPayLoadJsonWithUUID', [\"Requests/Payload/Json/Sample_Payload.json\"], indirect=['readPayLoadJsonWithUUID'])\n    def test_sample_test_case(self,apiTestData, readPayLoadJsonWithUUID, configLogger):\n        # put_user(apiTestData=apiTestData, endpointkey=\"Patient And Appointment\", configLogger=configLogger, readPayLoadJson=readPayLoadJsonWithUUID, headers=ast.literal_eval(apiTestData['Headers']['ContentTypeWithJsonBlob']))\n        # print(\"\\n ========================================================================================================================================================== \\n\")\n        # time.sleep(10)\n>       get_user(apiTestData=apiTestData, endpointkey=\"testget\",configLogger=configLogger)\n\nTestCases\\testsuites\\test_sample.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nRequests\\methods\\GetRequests\\getcommons\\GET_CommonActions.py:26: in get_user\n    responseBodyDict, reponseBody, Headers = apiRequest(\"GET\", endPointAfterReplacement, ResponseCode, configLogger,ResponseBodyVerification=ResponseBodyVerification, ResponseBodyType=ResponseBodyType)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nrequestType = 'GET', endPoint = 'https://reqres.in/api/2s/2?', ResponseCode = '[200]', logger = <RootLogger root (INFO)>, readPayLoadJson = {}\nheaders = {}, ResponseBodyVerification = ['transaction_id', 'status', 'DSEP PatientID', 'Docspera_ID', 'OID'], ResponseBodyType = 'Json'\nenv_instance = None\n\n    def apiRequest(requestType, endPoint, ResponseCode, logger, readPayLoadJson=None, headers=None, ResponseBodyVerification=None, ResponseBodyType=None, env_instance=None):\n        ValidationsObj = Validations(logger)\n        try:\n            if readPayLoadJson is None:\n                readPayLoadJson = {}\n                headers = {}\n            if 'PUT' == requestType.upper():\n                response = requests.put(endPoint, data=json.dumps(readPayLoadJson), headers=headers)\n            if 'GET' == requestType.upper():\n                response = requests.get(endPoint, data=json.dumps(readPayLoadJson), headers=headers)\n            if 'POST' == requestType.upper():\n                response = requests.post(endPoint, data=json.dumps(readPayLoadJson), headers=headers)\n            if 'DELETE' == requestType.upper():\n                response = requests.delete(endPoint, data=json.dumps(readPayLoadJson), headers=headers)\n            # Response code and response time\n            statusCodeValidation = ValidationsObj.statusCodeValidation(ResponseCode, response.status_code)\n            # response body - verification\n            if statusCodeValidation is True:\n                #logger.info(\"Response body values need to verify: \" + str(ResponseBodyVerification))\n                if ResponseBodyType is not None or ResponseBodyType.lower() != 'plain':\n                    if 'json' == ResponseBodyType.lower():\n>                       responseBody = jsonValidation(response, ResponseBodyVerification, logger)\nE                       NameError: name 'jsonValidation' is not defined\n\nCommonClass\\api_utils\\RequestsLib.py:29: NameError"}, "attachments": [{"name": "stdout", "source": "e7893d65-8023-45ee-9193-a394bada0457-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "readPayLoadJsonWithUUID", "value": "'Requests/Payload/Json/Sample_Payload.json'"}], "start": 1673193376107, "stop": 1673193376916, "uuid": "ffd455de-d347-49a5-8bc2-f857d1671916", "historyId": "15f3caf09d308017c239bcc062c0d633", "testCaseId": "606f971d2b9dc0d3c9639071702cc2c9", "fullName": "TestCases.testsuites.test_sample.TestSample#test_sample_test_case", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('env_setup')"}, {"name": "parentSuite", "value": "TestCases.testsuites"}, {"name": "suite", "value": "test_sample"}, {"name": "subSuite", "value": "TestSample"}, {"name": "host", "value": "DESKTOP-A8SJNO5"}, {"name": "thread", "value": "70652-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.testsuites.test_sample"}]}